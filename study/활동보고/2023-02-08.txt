2023-02-08 활동보고

2월 2주차 공부 목표
- Web 개발 Step-by-Step 으로 포기하지 않고 나아가기.
- Java 나아가면서 백준 문제 풀기.

실무 목표
- PLAYDEVS 제작
- WORKING LEVEL의 Java 학습

오전 학습 내용
- Java
	- 디버깅, 입력과 관련한 내용, main 함수의 문법 및 Argument 최종 정리.

디버깅 도구를 사용하는 방법
	- 라인 번호를 더블 클릭하여 Break Point 를 지정하는 방법
	- Step Over, Step into, Resume
		- Step Over를 사용하여 다음 명령으로 한 줄 씩 실행
		- Step into를 사용하여 현재 화살표가 가리키는 명령이 참조하는 메소드(클래스)로 이동.
		- Resume을 사용하여 Break Point 들의 시작점부터 끝 점까지 한 번에 실행하는 방법
	- Perspective를 스위치 하는 방법 - Java, Debug view
** 의문점: 디버깅을 하면서 바로 이전 명령으로 계속 Redo 할 수는 없을까?

입력과 관련된 내용
- 핵심 팁: 빨간 줄을 마우스 오버하고 Quick Fix를 활용하자.
	실전에서는 검색을 해서 최대한 활용하자.
	- swing 객체를 활용한 입력, 형변환, arguments 를 활용하는 방법

	- swing 객체를 활용한 입력
		- swing 객체에는 JoptionPane 메소드가 있다.
			JoptionPane 을 사용하면 GUI를 통해 String 값을 입력받을 수 있다.

	- 메소드를 활용한 자료형 변환 - Double.parseDouble
		객체, 클래스, 메소드에서 특정 자료형만 받도록 정의 될 수 있다.
		따라서 parse 메소드를 통해 적절히 자료형 변환을 하고, 인자를 전달해야한다.

	- arguments (인자)
		- Java의 표준 입력은 arguments 방식으로 이루어진다.
		- Run Configuration 을 통해 실행 시 자동으로 인자를 전달하도록 프리셋을 정의할 수 있다.
			- Run config. -> Arguments 탭에서 전달할 인자를 등록시킬 수 있다.
				- 등록되는 텍스트 필드에 띄어쓰기가 있을 경우 각각의 문자열로 인식한다.
				=> 큰 따옴표로 묶어주면 공백을 포함한 하나의 문자열로 인식한다. (Java 17 기준)
		- Run Configuration 은 동일 프로젝트에서 여러개 정의할 수 있으며, 각각 이름을 부여한다.
				=> 우클릭하여 복사 및 붙여넣기 할 수 있다.
		- 자주 사용하는 Run Configuration 은 Organize Favorite 를 통해 상단으로 정리시킬 수 있다.

main 함수의 문법 및 Argument 최종 정리.
	- 함수의 기본 문법: 함수명(자료형 파라미터명) {메소드}
		=> main(String[] args) 의 의미를 추론해보자.
			String[] 은 String 자료형의 배열 이다.
			args 는 매개변수로서 작용한다.
		==> 인자가 args 에 전달된다. -> String 형의 배열에 차곡차곡 저장된다.
		===> args[인덱스번호] 로 참조 할 수 있다.


오전 Feedback: 잘 하고 있다. 천천히 앞으로 나아가자.
- 분명히 이미 알고있는 내용은 꽤 있다. 어떻게 적용하면 좋을지, 정확히 추론하면서 앞으로 나아가자.
- 우선은 Java의 기본기를 다지는 것에 최선을 다해 집중하자.


오후 학습내용: Java. 프로그래밍 언어론, Java 구동 방식, Java 환경변수, Java 수동 컴파일.
	- Java 는 JIT 컴파일러가 도입되었고, 컴파일러가 내장되어있다. Java는 현재 컴파일 언어이다.
	- Java는 링킹과정이 없다. 클래스 파일에서 바로 JVM 간다.
	- JDK 제대로 활용하려면 PATH 등록 필요하다.
	- javac 는 컴파일을, java 는 클래스 파일 실행을 도와준다.

프로그래밍 언어론 기본 개념 정리.
	- 모든 고급 언어가 원시코드에서 기계어까지 번역이 되어야 하는 것은 동일하다.	
		원시코드를 Source Code, 기계어를 Byte Code 라고 부른다.
	- 크게 보면 컴파일 언어 / 인터프리터 언어로 나뉜다.
		- 컴파일 언어는 C 기준 소스파일 -> 목적(객체)파일+라이브러리 파일 -> 실행파일 -> 실행 의 흐름을 가진다.
		- 인터프리터 언어는 소스파일 -> 인터프리터를 통한 실행 의 흐름을 가진다
		- 인터프리터는 소스파일의 명령어를 한 줄 씩 순차적으로 바로바로 해석하며 실행한다.
		** 컴파일 언어는 번역이 느리지만 실행이 빠르다. / 인터프리터 언어는 번역은 빠르지만 실행이 느리다.
	- Java는 기존에 인터프리터 방식을 사용하다가 현재는 JIT(Just in Time) 방식의 컴파일 언어로 바뀌었다.
	==> 즉 C 스타일 언어처럼 소스파일을 통째로 클래스파일로 번역하고 클래스 파일을 실행시킨다.	
	===> Java 의 컴파일은 소스파일 -> 클래스파일 -> 실행 to JavaVM 의 흐름을 가진다. 

Java 구동 방식
	- Java는 Java VM 에서 실행이 되는 OS 플랫폼 범용 언어이다.
	- 대신 실행을 위해 JRE 설치를 해줘야 한다. (Java Runtime Environment - 자바실행환경)
	- JVM에는 바이트 코드 검증 등의 컴포넌트가 탑재되어 있으니 더 알아보자. 천천히.

Java 환경변수
	- 셸 환경에서 java 도구를 실행하려면 PATH 등록이 필요하다
	=> windows 는 GUI 통한 고급 시스템 설정 -> 환경변수
		PATH 변수의 값을 java 경로로 지정하거나
		JAVA_HOME 변수를 추가하고 값을 java 경로로 지정해도 된다.
		** CLI 지식: 프롬프트에서 지시하고 있는 경로에 없는 파일(명령) 이면 PATH를 참조한다. 
	=> macOS 및 Ubuntu 등은 .bash_profile 편집
	==> 경로는 JDK\bin 경로로 지정한다.
		하위에 java 및 javac 파일이 내장되어있다.

Java 수동 컴파일
	- java는 컴파일러가 내장되어 있다.
		- C의 경우에는 Windows 용 컴파일러, UNIX 기반에서는 gcc 등 각각의 컴파일러가 존재한다.
	- javac *.java 를 통해 원시파일을 클래스 파일로 컴파일한다.
	- java * 를 통해 클래스 파일을 실행한다. 확장자는 명시하지 않는다.
	- Java 기본 상식이지만, 클래스명과 소스파일명은 같아야 한다.
	- 함수명이 main 함수가 아니면 JavaFX* 오류가 발생한다.

오후 Feedback: 천천히, 꼭꼭 씹되 너무 많이 씹지 말고, 꾸준히 정리 해 나가자.
	- 순간순간마다 너무 깊게 들어가지 말고, 적절히 나아가면서 필요 할 때 응용하자.
	- 빠른 투입도 필요한데, 최소한의 스택을 갖추기 위해서 나아가야 할 길이 정말 멀다.


오늘의 최종 Feedback: 꾸준히 유지하면서 나아가자.
	- 멈춰있던 공부 다시 하는 것 만으로도 행복하다.
	- 깊게 들어가는 공부를 유지할 수 있도록 스택을 갖추자. 그리고 유지하자.
	- 부족하지만 최적 경로는 필요한 스택을 빠르게 채우는 스퍼트가 맞다. 그 다음 천천히 꾸준하게 유지하자.