GIT 경험

GIT init 된 디렉토리는 git으로 관리하게 됨. -> 일반 디렉토리와 다른 형태로 기능함.
// 브랜치 전환에 따라 파일 및 디렉토리가 반응형으로 바뀜.

git add . 명령어로 현재 디렉토리 및 하위 디렉토리의 모든 내용을 add 할 수 있음.

git remote -m 기존_브랜치명 변경할_브랜치명 -> 브랜치 이름을 변경할 수 있다.

git push 로 GitHub 올라갈 경우 해당 브랜치 원본의 커밋 및 날짜가 보존되어 올라간다. (이 행위 만으로 잔디는 쌓인다.)

git push origin --delete 제거할_브랜치명 으로 GitHub 브랜치 제거할 수 있다.
	// GitHub 저장소에 Default 브랜치로 설정되어 있을 경우 제거할 수 없다.

git reset HEAD^ 하면 최근 커밋 및 스테이징까지 취소된다.
	// git status 시 스테이징 빠진 상태 + 커밋취소내역으로 확인 가능.
	// git add 다시 한 번 해줘야 함.
*git 문서 정독할 것.

GIT 브랜치 관련
git ls-files 통해 현재 브랜치의 파일 목록 확인 가능.
git rm --cached "파일명" 으로 잘못 add 된 파일 삭제 가능.
git rm --cached -r 폴더명 으로 잘못 올라간 파일 삭제 가능.
	// 이후 다시 push 하면 원격 저장소에 반영.
***	GIT rm 만 사용할 경우 로컬 디렉토리의 파일까지 제거되므로 주의	***

git branch 명령 수행 시 현재 브랜치의 자식 브랜치로 생성된다.
	// 커밋도, 파일도 모두 따라옴.
따라서 신규 브랜치 생성 시 현재 브랜치를 정확히 지정해줘야 한다.

만일, 완전히 비어있는 새 브랜치 생성을 원할 경우
git checkout --orphan "브랜치명" 해주면 비어있는 브랜치 생성 및 해당 브랜치로 전환된다.


git reflog 명령어로 역대 git 저장소 커밋 이력을 볼 수 있다.
	// 커밋아이디	커밋내용(작업내용) 형태로 출력된다.